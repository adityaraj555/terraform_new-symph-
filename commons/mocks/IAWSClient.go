// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	lambda "github.com/aws/aws-sdk-go/service/lambda"
	mock "github.com/stretchr/testify/mock"
)

// IAWSClient is an autogenerated mock type for the IAWSClient type
type IAWSClient struct {
	mock.Mock
}

// FetchS3BucketPath provides a mock function with given fields: s3Path
func (_m *IAWSClient) FetchS3BucketPath(s3Path string) (string, string, error) {
	ret := _m.Called(s3Path)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(s3Path)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(s3Path)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(s3Path)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDataFromS3 provides a mock function with given fields: ctx, bucketName, s3KeyPath
func (_m *IAWSClient) GetDataFromS3(ctx context.Context, bucketName string, s3KeyPath string) ([]byte, error) {
	ret := _m.Called(ctx, bucketName, s3KeyPath)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucketName, s3KeyPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, s3KeyPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecret provides a mock function with given fields: ctx, secretName, region
func (_m *IAWSClient) GetSecret(ctx context.Context, secretName string, region string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, secretName, region)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]interface{}); ok {
		r0 = rf(ctx, secretName, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, secretName, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretString provides a mock function with given fields: ctx, secretManagerNameArn
func (_m *IAWSClient) GetSecretString(ctx context.Context, secretManagerNameArn string) (string, error) {
	ret := _m.Called(ctx, secretManagerNameArn)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, secretManagerNameArn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, secretManagerNameArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeLambda provides a mock function with given fields: ctx, lambdafunctionArn, payload
func (_m *IAWSClient) InvokeLambda(ctx context.Context, lambdafunctionArn string, payload map[string]interface{}) (*lambda.InvokeOutput, error) {
	ret := _m.Called(ctx, lambdafunctionArn, payload)

	var r0 *lambda.InvokeOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) *lambda.InvokeOutput); ok {
		r0 = rf(ctx, lambdafunctionArn, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, lambdafunctionArn, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeSFN provides a mock function with given fields: Input, StateMachineArn
func (_m *IAWSClient) InvokeSFN(Input *string, StateMachineArn *string) (string, error) {
	ret := _m.Called(Input, StateMachineArn)

	var r0 string
	if rf, ok := ret.Get(0).(func(*string, *string) string); ok {
		r0 = rf(Input, StateMachineArn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, *string) error); ok {
		r1 = rf(Input, StateMachineArn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreDataToS3 provides a mock function with given fields: ctx, bucketName, s3KeyPath, responseBody
func (_m *IAWSClient) StoreDataToS3(ctx context.Context, bucketName string, s3KeyPath string, responseBody []byte) error {
	ret := _m.Called(ctx, bucketName, s3KeyPath, responseBody)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, bucketName, s3KeyPath, responseBody)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
