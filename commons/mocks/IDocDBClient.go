// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	documentDB_client "github.eagleview.com/engineering/symphony-service/commons/documentDB_client"
)

// IDocDBClient is an autogenerated mock type for the IDocDBClient type
type IDocDBClient struct {
	mock.Mock
}

// BuildQueryForCallBack provides a mock function with given fields: event, status, workflowID, stepID, TaskName, callbackResponse
func (_m *IDocDBClient) BuildQueryForCallBack(event string, status string, workflowID string, stepID string, TaskName string, callbackResponse map[string]interface{}) (interface{}, interface{}) {
	ret := _m.Called(event, status, workflowID, stepID, TaskName, callbackResponse)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, map[string]interface{}) interface{}); ok {
		r0 = rf(event, status, workflowID, stepID, TaskName, callbackResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, map[string]interface{}) interface{}); ok {
		r1 = rf(event, status, workflowID, stepID, TaskName, callbackResponse)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// BuildQueryForUpdateWorkflowDataCallout provides a mock function with given fields: TaskName, stepID, status, starttime, IsWaitTask
func (_m *IDocDBClient) BuildQueryForUpdateWorkflowDataCallout(TaskName string, stepID string, status string, starttime int64, IsWaitTask bool) interface{} {
	ret := _m.Called(TaskName, stepID, status, starttime, IsWaitTask)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string, string, string, int64, bool) interface{}); ok {
		r0 = rf(TaskName, stepID, status, starttime, IsWaitTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// CheckConnection provides a mock function with given fields: ctx
func (_m *IDocDBClient) CheckConnection(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchStepExecutionData provides a mock function with given fields: StepId
func (_m *IDocDBClient) FetchStepExecutionData(StepId string) (documentDB_client.StepExecutionDataBody, error) {
	ret := _m.Called(StepId)

	var r0 documentDB_client.StepExecutionDataBody
	if rf, ok := ret.Get(0).(func(string) documentDB_client.StepExecutionDataBody); ok {
		r0 = rf(StepId)
	} else {
		r0 = ret.Get(0).(documentDB_client.StepExecutionDataBody)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(StepId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchWorkflowExecutionData provides a mock function with given fields: workFlowId
func (_m *IDocDBClient) FetchWorkflowExecutionData(workFlowId string) (documentDB_client.WorkflowExecutionDataBody, error) {
	ret := _m.Called(workFlowId)

	var r0 documentDB_client.WorkflowExecutionDataBody
	if rf, ok := ret.Get(0).(func(string) documentDB_client.WorkflowExecutionDataBody); ok {
		r0 = rf(workFlowId)
	} else {
		r0 = ret.Get(0).(documentDB_client.WorkflowExecutionDataBody)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(workFlowId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertStepExecutionData provides a mock function with given fields: StepExecutionData
func (_m *IDocDBClient) InsertStepExecutionData(StepExecutionData documentDB_client.StepExecutionDataBody) error {
	ret := _m.Called(StepExecutionData)

	var r0 error
	if rf, ok := ret.Get(0).(func(documentDB_client.StepExecutionDataBody) error); ok {
		r0 = rf(StepExecutionData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertWorkflowExecutionData provides a mock function with given fields: Data
func (_m *IDocDBClient) InsertWorkflowExecutionData(Data documentDB_client.WorkflowExecutionDataBody) error {
	ret := _m.Called(Data)

	var r0 error
	if rf, ok := ret.Get(0).(func(documentDB_client.WorkflowExecutionDataBody) error); ok {
		r0 = rf(Data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDocumentDB provides a mock function with given fields: query, update, collectionName
func (_m *IDocDBClient) UpdateDocumentDB(query interface{}, update interface{}, collectionName string) error {
	ret := _m.Called(query, update, collectionName)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, string) error); ok {
		r0 = rf(query, update, collectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
