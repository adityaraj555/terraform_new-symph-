{
    "Comment": "A description of my state machine",
    "StartAt": "InsertWorkflowDataToDocDB",
    "States": {
        "InsertWorkflowDataToDocDB": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.InsertWorkflowDataToDocDB",
            "OutputPath": "$",
            "Parameters": {
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-datastorelambda:$LATEST",
                "Payload": {
                    "input.$": "$$.Execution.Input",
                    "orderId.$": "$$.Execution.Input.orderId",
                    "workflowId.$": "$$.Execution.Name",
                    "action": "insert"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "UpdateLegacyMLAutomationStart",
            "TimeoutSeconds": 30
        },
        "UpdateLegacyMLAutomationStart": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.UpdateLegacyMLAutomationStart",
            "OutputPath": "$",
            "Parameters": {
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "taskName": "UpdateLegacyMLAutomationStart",
                    "callType": "eagleflow",
                    "status": "MAStarted",
                    "requestData": {}
                },
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "MeasurementAutomation",
            "TimeoutSeconds": 210
        },
        "MeasurementAutomation": {
            "Type": "Parallel",
            "Next": "ThrottleService",
            "Branches": [
                {
                    "StartAt": "GetImageMetaData",
                    "States": {
                        "GetImageMetaData": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "ResultSelector": {
                                "response.$": "$.Payload"
                            },
                            "ResultPath": "$.GetImageMetaData",
                            "OutputPath": "$",
                            "Parameters": {
                                "Payload": {
                                    "requestData": {},
                                    "url.$": "States.Format('${ENDPOINT_URL_LEGACY}/GetReportFile?reportId={}&fileTypeId=149', $$.Execution.Input.reportId)",
                                    "requestMethod": "GET",
                                    "headers": {
                                        "Authorization": "Basic OTQ5RTU5MDEtM0EwQi00RjBGLTgyMEEtRkNBNDlCQ0FGQzc2OjcwMDg2RUMzNkZFNzdFRjE3NkE1MkQyQTQxNDM1MjlDRUUxNTgxN0M3RDA0QTBFMjAyNjY5NDE1NjZCM0ExQjY="
                                    },
                                    "isWaitTask": false,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3.$": "States.Format('s3://${resource_name_prefix}-s3-property-data-orchestrator/{}/get_image_metadata/imageMetadata.json', $$.Execution.Input.reportId)",
                                    "taskName": "GetImageMetaData",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "auth": {}
                                },
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "ImageSelection",
                            "TimeoutSeconds": 60
                        },
                        "ImageSelection": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.ImageSelection",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "address.$": "$$.Execution.Input.address",
                                        "getImageMetadata.$": "$.GetImageMetaData.response.s3DataLocation"
                                    },
                                    "url": "${ENDPOINT_URL_MA}/ma-image-selector/v2/image-selection",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "ImageSelection",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "FacetKeyPointDetection",
                            "TimeoutSeconds": 7200
                        },
                        "FacetKeyPointDetection": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.FacetKeyPointDetection",
                            "OutputPath": "$",
                            "Parameters": {
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "address.$": "$$.Execution.Input.address",
                                        "getImageMetadata.$": "$.GetImageMetaData.response.s3DataLocation",
                                        "imageSelectionService.$": "$.ImageSelection.response.imageSelectionLocation"
                                    },
                                    "url": "${ENDPOINT_URL_MA}/measurement-automation/v2/measurement-automation",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "FacetKeyPointDetection",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                },
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "${Task3DModellingService}",
                            "TimeoutSeconds": 7200
                        },
                        "${Task3DModellingService}": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.${Task3DModellingService}",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "address.$": "$$.Execution.Input.address",
                                        "getImageMetadata.$": "$.GetImageMetaData.response.s3DataLocation",
                                        "imageSelectionService.$": "$.ImageSelection.response.imageSelectionLocation",
                                        "facetKeyPointDetection.$": "$.FacetKeyPointDetection.response.facetKeyPointLocation"
                                    },
                                    "url": "${ENDPOINT_URL_3DMODELLING}/runs",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "${Task3DModellingService}",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "End": true,
                            "TimeoutSeconds": 7200
                        }
                    }
                }
            ],
            "ResultSelector": {
                "response.$": "$[0]"
            },
            "OutputPath": "$.response",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "updateMLAutomationRejected",
                    "ResultPath": "$.MAError"
                }
            ]
        },
        "ThrottleService": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.ThrottleService",
            "OutputPath": "$",
            "Parameters": {
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "isPenetration.$": "$$.Execution.Input.isPenetration",
                    "isHipsterEnabled.$": "$$.Execution.Input.isHipsterEnabled",
                    "orderType.$": "$$.Execution.Input.orderType"
                },
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-throttleservice:$LATEST"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "Hipster/Twister",
            "TimeoutSeconds": 60
        },
        "Hipster/Twister": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.ThrottleService.response.Path",
                    "StringEquals": "Twister",
                    "Comment": "twister flow",
                    "Next": "PMF-EVJSON Converter Upload to EVOSS"
                }
            ],
            "Default": "CheckIsMultiStructure"
        },
        "CheckIsMultiStructure": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
            "ResultSelector": {
                "response.$": "$"
            },
            "ResultPath": "$.CheckIsMultiStructure",
            "OutputPath": "$",
            "Parameters": {
                "Payload": {
                    "requestData": {
                        "address": {
                            "lat.$": "$$.Execution.Input.address.latitude",
                            "long.$": "$$.Execution.Input.address.longitude"
                        },
                        "meta": {
                            "callbackUrl": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-checkhipstereligibility"
                        }
                    },
                    "url": "${SIM_HOST_URL}/pdo/api/v1/sim/job",
                    "requestMethod": "POST",
                    "headers": {},
                    "isWaitTask": true,
                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                    "timeout": 45,
                    "storeDataToS3": "",
                    "taskName": "CheckIsMultiStructure",
                    "workflowId.$": "$$.Execution.Name",
                    "taskToken.$": "$$.Task.Token",
                    "auth": {
                        "type": "bearer",
                        "authData": {
                            "secretStoreType": "pdo_secret_manager",
                            "clientIdKey": "ClientID",
                            "clientSecretKey": "ClientSecret",
                            "url": "${ENDPOINT_AUTH_TOKEN}"
                        }
                    }
                },
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "isHipsterCompatible",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "UpdateFlowTypeToTwister",
                    "ResultPath": "$.CheckIsMultiStructure"
                }
            ],
            "TimeoutSeconds": 300
        },
        "isHipsterCompatible": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.CheckIsMultiStructure.response.isHipsterCompatible",
                    "BooleanEquals": true,
                    "Next": "UpdateFlowTypeToHipster"
                }
            ],
            "Default": "UpdateFlowTypeToTwister"
        },
        "UpdateFlowTypeToTwister": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$",
            "Parameters": {
                "Payload": {
                    "input.$": "$$.Execution.Input",
                    "orderId.$": "$$.Execution.Input.orderId",
                    "workflowId.$": "$$.Execution.Name",
                    "action": "updateFlowType",
                    "flowType": "Twister"
                },
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-datastorelambda:$LATEST"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "PMF-EVJSON Converter Upload to EVOSS",
            "ResultPath": "$.UpdateFlowTypeToTwister"
        },
        "UpdateFlowTypeToHipster": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$",
            "Parameters": {
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-datastorelambda:$LATEST",
                "Payload": {
                    "input.$": "$$.Execution.Input",
                    "orderId.$": "$$.Execution.Input.orderId",
                    "workflowId.$": "$$.Execution.Name",
                    "action": "updateFlowType",
                    "flowType": "Hipster"
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "UpdateLegacyMLSymphonyAutomationComplete",
            "ResultPath": "$.UpdateFlowTypeToHipster"
        },
        "UpdateLegacyMLSymphonyAutomationComplete": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.UpdateLegacyMLAutomationComplete",
            "OutputPath": "$",
            "Parameters": {
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "taskName": "UpdateLegacyMLSymphonyAutomationComplete",
                    "callType": "eagleflow",
                    "status": "MASymphonyCompleted",
                    "requestData": {}
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "Hipster",
            "TimeoutSeconds": 210
        },
        "Hipster": {
            "Type": "Parallel",
            "Next": "PMF-EVJSON Converter Upload to EVOSS",
            "Branches": [
                {
                    "StartAt": "HipsterSlackNotification",
                    "States": {
                        "HipsterSlackNotification": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "channel": "${Hipster_Notification_Channel}",
                                        "blocks": [
                                            {
                                                "type": "header",
                                                "text": {
                                                    "type": "plain_text",
                                                    "text": "Ready for Hipster measurement"
                                                }
                                            },
                                            {
                                                "type": "section",
                                                "text": {
                                                    "type": "mrkdwn",
                                                    "text.$": "States.Format('ReportID - {}', $$.Execution.Input.reportId)"
                                                }
                                            },
                                            {
                                                "type": "divider"
                                            }
                                        ]
                                    },
                                    "url": "${SLACK_ENDPOINT}",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": false,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "HipsterSlackNotification",
                                    "workflowId.$": "$$.Execution.Name",
                                    "auth": {
                                        "type": "bearer_secret",
                                        "authData": {
                                            "secretStoreType": "pdo_secret_manager",
                                            "bearerTokenKey": "SLACK_TOKEN"
                                        }
                                    }
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException",
                                        "RetriableError"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "${TaskCreateHipsterJobAndWaitForMeasurement}",
                            "ResultSelector": {
                                "response.$": "$.Payload"
                            },
                            "ResultPath": "$.HipsterSlackNotification",
                            "TimeoutSeconds": 60
                        },
                        "${TaskCreateHipsterJobAndWaitForMeasurement}": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.${TaskCreateHipsterJobAndWaitForMeasurement}",
                            "OutputPath": "$",
                            "Parameters": {
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "address.$": "$$.Execution.Input.address",
                                        "customerNotes.$": "$$.Execution.Input.customerNotes",
                                        "measurementInstructions.$": "$$.Execution.Input.measurementInstructions",
                                        "orderType.$": "$$.Execution.Input.orderType",
                                        "propertyModelLocation.$": "$.${Task3DModellingService}.response.propertyModelLocation"
                                    },
                                    "url": "${ENDPOINT_URL_HIPSTER}/hipster/v2/job",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "${TaskCreateHipsterJobAndWaitForMeasurement}",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "callType": "hipster",
                                    "taskToken.$": "$$.Task.Token",
                                    "status": "MeasurementStarted",
                                    "auth": {}
                                },
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "UpdateHipsterMeasurementCompleteInLegacy"
                        },
                        "UpdateHipsterMeasurementCompleteInLegacy": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "ResultSelector": {
                                "response.$": "$.Payload"
                            },
                            "ResultPath": "$.UpdateHipsterMeasurementCompleteInLegacy",
                            "OutputPath": "$",
                            "Parameters": {
                                "Payload": {
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskName": "UpdateHipsterMeasurementCompleteInLegacy",
                                    "callType": "eagleflow",
                                    "status": "MeasurementCompleted",
                                    "requestData": {}
                                },
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "${TaskUpdateHipsterJobAndWaitForQC}",
                            "TimeoutSeconds": 210
                        },
                        "${TaskUpdateHipsterJobAndWaitForQC}": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.${TaskUpdateHipsterJobAndWaitForQC}",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "mode": "QC"
                                    },
                                    "url.$": "States.Format('${ENDPOINT_URL_HIPSTER}/hipster/v2/job/{}', $.${TaskCreateHipsterJobAndWaitForMeasurement}.response.jobId)",
                                    "requestMethod": "PUT",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "${TaskUpdateHipsterJobAndWaitForQC}",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "callType": "hipster",
                                    "taskToken.$": "$$.Task.Token",
                                    "status": "QCStarted",
                                    "hipsterJobId.$": "$.${TaskCreateHipsterJobAndWaitForMeasurement}.response.jobId",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "Rework"
                        },
                        "Rework": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Variable": "$.${TaskUpdateHipsterJobAndWaitForQC}.response.isReworkRequired",
                                    "BooleanEquals": true,
                                    "Comment": "Rework",
                                    "Next": "UpdateHipsterJobAndWaitForMeasurement"
                                }
                            ],
                            "Default": "Pass"
                        },
                        "Pass": {
                            "Type": "Pass",
                            "End": true
                        },
                        "UpdateHipsterJobAndWaitForMeasurement": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.UpdateHipsterJobAndWaitForMeasurement",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "mode": "Measurement"
                                    },
                                    "url.$": "States.Format('${ENDPOINT_URL_HIPSTER}/hipster/v2/job/{}', $.${TaskCreateHipsterJobAndWaitForMeasurement}.response.jobId)",
                                    "requestMethod": "PUT",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "UpdateHipsterJobAndWaitForMeasurement",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "callType": "hipster",
                                    "taskToken.$": "$$.Task.Token",
                                    "status": "MeasurementStarted",
                                    "hipsterJobId.$": "$.${TaskCreateHipsterJobAndWaitForMeasurement}.response.jobId",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "UpdateHipsterMeasurementCompleteInLegacy"
                        }
                    }
                }
            ],
            "ResultSelector": {
                "response.$": "$[0]"
            },
            "OutputPath": "$.response",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "PMF-EVJSON Converter Upload to EVOSS",
                    "ResultPath": "$.HipsterError"
                }
            ]
        },
        "updateMLAutomationRejected": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.updateMLAutomationRejected",
            "OutputPath": "$",
            "Parameters": {
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "taskName": "updateMLAutomationRejected",
                    "callType": "eagleflow",
                    "status": "MAFailed",
                    "requestData": {}
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "updateWorkflowDataToDocDB",
            "TimeoutSeconds": 210
        },
        "PMF-EVJSON Converter Upload to EVOSS": {
            "Type": "Parallel",
            "Next": "UpdateLegacyStatus",
            "Branches": [
                {
                    "StartAt": "GetPMFPath",
                    "States": {
                        "GetPMFPath": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "ResultSelector": {
                                "response.$": "$.Payload"
                            },
                            "ResultPath": "$.GetPMFPath",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-evmlconverter:$LATEST",
                                "Payload": {
                                    "workflowId.$": "$$.Execution.Name",
                                    "reportId.$": "$$.Execution.Input.reportId"
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "RetriableError",
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "PMFConverter",
                            "TimeoutSeconds": 60
                        },
                        "PMFConverter": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "reportId.$": "$$.Execution.Input.reportId",
                                        "propertyModelLocation.$": "$.GetPMFPath.response.propertyModelS3Path",
                                        "imageMetaDataLocation.$": "$.GetImageMetaData.response.s3DataLocation",
                                        "meta": {
                                            "path.$": "$.GetPMFPath.response.path"
                                        }
                                    },
                                    "url": "${ENDPOINT_URL_PMF_CONVERTER}",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "taskName": "ConvertPropertyModelToEVJson",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException",
                                        "RetriableError"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "Next": "UploadToEVOSS",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.PMFConverter",
                            "TimeoutSeconds": 1200
                        },
                        "UploadToEVOSS": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {},
                                    "url.$": "States.Format('${ENDPOINT_URL_LEGACY}/UploadMLJson?reportId={}', $$.Execution.Input.reportId)",
                                    "requestMethod": "POST",
                                    "headers": {
                                        "Authorization": "Basic OTQ5RTU5MDEtM0EwQi00RjBGLTgyMEEtRkNBNDlCQ0FGQzc2OjcwMDg2RUMzNkZFNzdFRjE3NkE1MkQyQTQxNDM1MjlDRUUxNTgxN0M3RDA0QTBFMjAyNjY5NDE1NjZCM0ExQjY="
                                    },
                                    "isWaitTask": false,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 45,
                                    "storeDataToS3": "",
                                    "getRequestBodyFromS3.$": "$.PMFConverter.response.evJsonLocation",
                                    "s3RequestBodyType": "base64",
                                    "taskName": "UploadEVJSONtoEVOSS",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException",
                                        "RetriableError"
                                    ],
                                    "IntervalSeconds": 60,
                                    "MaxAttempts": 2,
                                    "BackoffRate": 1
                                }
                            ],
                            "End": true,
                            "ResultSelector": {
                                "response.$": "$.Payload"
                            },
                            "ResultPath": "$.UploadToEVOSS",
                            "TimeoutSeconds": 180
                        }
                    }
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "updateMLAutomationRejected"
                }
            ],
            "ResultSelector": {
                "response.$": "$[0]"
            },
            "OutputPath": "$.response"
        },
        "UpdateLegacyStatus": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.UpdateLegacyStatus",
            "OutputPath": "$",
            "Parameters": {
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "taskName": "UpdateLegacyStatus",
                    "callType": "eagleflow",
                    "status.$": "$.GetPMFPath.response.legacyStatus",
                    "requestData": {}
                },
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-calloutlambda:$LATEST"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "RetriableError",
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "Next": "updateWorkflowDataToDocDB",
            "TimeoutSeconds": 60
        },
        "updateWorkflowDataToDocDB": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "ResultSelector": {
                "response.$": "$.Payload"
            },
            "ResultPath": "$.updateWorkflowDataToDocDB",
            "OutputPath": "$",
            "Parameters": {
                "Payload": {
                    "input.$": "$$.Execution.Input",
                    "orderId.$": "$$.Execution.Input.orderId",
                    "workflowId.$": "$$.Execution.Name",
                    "action": "update"
                },
                "FunctionName": "arn:aws:lambda:${region}:${resource_name_prefix}-lambda-datastorelambda"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 2,
                    "BackoffRate": 1
                }
            ],
            "End": true,
            "TimeoutSeconds": 30
        }
    }
}