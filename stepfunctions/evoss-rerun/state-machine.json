{
    "Comment": "A description of my state machine",
    "StartAt": "InsertIntoDocumentDb",
    "States": {
      "InsertIntoDocumentDb": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "input.$": "$$.Execution.Input",
            "orderId.$": "$$.Execution.Input.orderId",
            "workflowId.$": "$$.Execution.Name",
            "action": "insert"
          },
          "FunctionName": "arn:aws:lambda:us-east-2:app-test-1x0-lambda-datastorelambda:$LATEST"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "ConvertPmfToEVJson"
      },
      "ConvertPmfToEVJson": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "requestData": {
              "reportId.$": "$$.Execution.Input.reportId",
              "propertyModelLocation.$": "States.Format('s3://app-test-1x0-s3-property-data-orchestrator/{}/hipster_output.json', $$.Execution.Input.reportId)",
              "imageMetaDataLocation.$": "States.Format('s3://app-test-1x0-s3-property-data-orchestrator/{}/get_image_metadata/imageMetadata.json', $$.Execution.Input.reportId)"
            },
            "url": "https://api.cmh.platform-test2.evinternal.net/factory-dx-human-extraction/pmf-conversion/converter",
            "requestMethod": "POST",
            "headers": {},
            "isWaitTask": true,
            "retry": "number of times we want to retry on specific error types like timeout, 500",
            "timeout": 45,
            "storeDataToS3": "",
            "taskName": "ConvertPmfToEVJson",
            "orderId.$": "$$.Execution.Input.orderId",
            "reportId.$": "$$.Execution.Input.reportId",
            "workflowId.$": "$$.Execution.Name",
            "taskToken.$": "$$.Task.Token",
            "auth": {}
          },
          "FunctionName": "arn:aws:lambda:us-east-2:app-test-1x0-lambda-calloutlambda:$LATEST"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "UploadToEvoss"
      },
      "UploadToEvoss": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "requestData": {},
            "url.$": "States.Format('https://intranetrest.cmh.reportstest.evinternal.net/UploadMLJson?reportId={}', $$.Execution.Input.reportId)",
            "requestMethod": "POST",
            "headers": {
              "Authorization": "Basic OTQ5RTU5MDEtM0EwQi00RjBGLTgyMEEtRkNBNDlCQ0FGQzc2OjcwMDg2RUMzNkZFNzdFRjE3NkE1MkQyQTQxNDM1MjlDRUUxNTgxN0M3RDA0QTBFMjAyNjY5NDE1NjZCM0ExQjY="
            },
            "isWaitTask": false,
            "retry": "number of times we want to retry on specific error types like timeout, 500",
            "timeout": 45,
            "storeDataToS3": "",
            "getRequestBodyFromS3.$": "$.ConvertPmfToEVJson.response.evJsonLocation",
            "s3RequestBodyType": "base64",
            "taskName": "UploadToEvoss",
            "orderId.$": "$$.Execution.Input.orderId",
            "reportId.$": "$$.Execution.Input.reportId",
            "workflowId.$": "$$.Execution.Name",
            "auth": {}
          },
          "FunctionName": "arn:aws:lambda:us-east-2:app-test-1x0-lambda-calloutlambda:$LATEST"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "UpdateLegacyStatus"
      },
      "UpdateLegacyStatus": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "orderId.$": "$$.Execution.Input.orderId",
            "reportId.$": "$$.Execution.Input.reportId",
            "workflowId.$": "$$.Execution.Name",
            "taskName": "UpdateLegacyStatus",
            "callType": "eagleflow",
            "status": "HipsterQCCompleted",
            "requestData": {}
          },
          "FunctionName": "arn:aws:lambda:us-east-2:app-test-1x0-lambda-calloutlambda:$LATEST"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "End": true
      }
    }
  }