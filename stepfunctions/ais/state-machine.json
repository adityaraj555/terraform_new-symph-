{
    "Comment": "A description of my state machine",
    "StartAt": "Parallel",
    "States": {
        "Parallel": {
            "Type": "Parallel",
            "Next": "AutomatedImageSelectionCompleted",
            "Branches": [
                {
                    "StartAt": "ImageryCheck",
                    "States": {
                        "ImageryCheck": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.ImageryCheck",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:us-east-2:app-dev-1x0-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "latitude.$": "$$.Execution.Input.address.latitude",
                                        "longitude.$": "$$.Execution.Input.address.longitude"
                                    },
                                    "url": "https://26fc-103-77-0-214.ngrok.io/imageryCheck",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 15,
                                    "storeDataToS3": "",
                                    "taskName": "ImageryCheck",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "Next": "BuildingDetection"
                        },
                        "BuildingDetection": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.BuildingDetection",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:us-east-2:app-dev-1x0-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "latitude.$": "$$.Execution.Input.address.latitude",
                                        "longitude.$": "$$.Execution.Input.address.longitude",
                                        "imageCheckOutput": "$.ImageryCheck.response.imageCheckOutput",
                                        "parcelGeometryOutput": "$.ImageryCheck.response.imageCheckOutput"
                                    },
                                    "url": "https://26fc-103-77-0-214.ngrok.io/buildingDetection",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 15,
                                    "storeDataToS3": "",
                                    "taskName": "BuildingDetection",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "Next": "ImageSelection"
                        },
                        "ImageSelection": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.ImageSelection",
                            "OutputPath": "$",
                            "Parameters": {
                                "FunctionName": "arn:aws:lambda:us-east-2:app-dev-1x0-lambda-calloutlambda:$LATEST",
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "latitude.$": "$$.Execution.Input.address.latitude",
                                        "longitude.$": "$$.Execution.Input.address.longitude",
                                        "imageCheckOutput": "$.ImageryCheck.response.imageCheckOutput",
                                        "parcelGeometryOutput": "$.ImageryCheck.response.imageCheckOutput",
                                        "orthoImagePath": "$.BuildingDetection.response.orthoImagePath",
                                        "cropImagePath": "$.BuildingDetection.response.cropImagePath"
                                    },
                                    "url": "https://26fc-103-77-0-214.ngrok.io/imageSelection",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": true,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 15,
                                    "storeDataToS3": "",
                                    "taskName": "ImageSelection",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "taskToken.$": "$$.Task.Token",
                                    "auth": {}
                                }
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "Next": "RetrieveandStoreImagesMetadata"
                        },
                        "RetrieveandStoreImagesMetadata": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "ResultSelector": {
                                "response.$": "$"
                            },
                            "ResultPath": "$.RetrieveandStore",
                            "OutputPath": "$",
                            "Parameters": {
                                "Payload": {
                                    "requestData": {
                                        "orderId.$": "$$.Execution.Input.orderId",
                                        "latitude.$": "$$.Execution.Input.address.latitude",
                                        "longitude.$": "$$.Execution.Input.address.longitude",
                                        "S3URI.$": "$.ImageSelection.response.S3URI",
                                        "selectedImages.$": "$.ImageSelection.response.selectedImages"
                                    },
                                    "url": "https://26fc-103-77-0-214.ngrok.io/retrieveandStoreImagesMetadata",
                                    "requestMethod": "POST",
                                    "headers": {},
                                    "isWaitTask": false,
                                    "retry": "number of times we want to retry on specific error types like timeout, 500",
                                    "timeout": 15,
                                    "storeDataToS3": "",
                                    "taskName": "RetrieveandStoreImagesMetadata",
                                    "orderId.$": "$$.Execution.Input.orderId",
                                    "reportId.$": "$$.Execution.Input.reportId",
                                    "workflowId.$": "$$.Execution.Name",
                                    "auth": {}
                                },
                                "FunctionName": "arn:aws:lambda:us-east-2:app-dev-1x0-lambda-calloutlambda:$LATEST"
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "End": true
                        }
                    }
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": ["States.ALL"],
                    "Next": "AutomatedImageSelectionFailed"
                }
            ]
        },
        "AutomatedImageSelectionCompleted": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$",
            "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-2:app-dev-1x0-lambda-calloutlambda:$LATEST",
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "taskName": "AutomatedImageSelectionCompleted",
                    "callType": "eagleflow",
                    "status": "MAStarted",
                    "requestData": {}
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                }
            ],
            "End": true
        },
        "AutomatedImageSelectionFailed": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "OutputPath": "$",
            "Parameters": {
                "FunctionName": "arn:aws:lambda:us-east-2:app-dev-1x0-lambda-calloutlambda:$LATEST",
                "Payload": {
                    "orderId.$": "$$.Execution.Input.orderId",
                    "reportId.$": "$$.Execution.Input.reportId",
                    "workflowId.$": "$$.Execution.Name",
                    "taskName": "AutomatedImageSelectionFailed",
                    "callType": "eagleflow",
                    "status": "MAStarted",
                    "requestData": {}
                }
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "Lambda.ServiceException",
                        "Lambda.AWSLambdaException",
                        "Lambda.SdkClientException"
                    ],
                    "IntervalSeconds": 2,
                    "MaxAttempts": 6,
                    "BackoffRate": 2
                }
            ],
            "End": true
        }
    }
}
